"use strict";(self.webpackChunkd_app_node_docs=self.webpackChunkd_app_node_docs||[]).push([[9071],{7356:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"smooth/deep-dive-into-smooth/states","title":"Smooth Validator States","description":"A Smooth validator can be in multiple states depending on its behavior. In this section we will explain all possible states a validator can have, the consequences of being each state, and how a validator can transition from one state to another.","source":"@site/docs/smooth/deep-dive-into-smooth/states.md","sourceDirName":"smooth/deep-dive-into-smooth","slug":"/smooth/deep-dive-into-smooth/states","permalink":"/docs/smooth/deep-dive-into-smooth/states","draft":false,"unlisted":false,"editUrl":"https://github.com/dappnode/DappnodeDocs/edit/master/docs/smooth/deep-dive-into-smooth/states.md","tags":[],"version":"current","frontMatter":{},"sidebar":"smoothSidebar","previous":{"title":"Rewards","permalink":"/docs/smooth/deep-dive-into-smooth/rewards"},"next":{"title":"Oracle & Smart Contract","permalink":"/docs/smooth/deep-dive-into-smooth/oracle-sm"}}');var i=o(4848),a=o(8453);const n={},r="Smooth Validator States",l={},d=[{value:"State Machine Overview",id:"state-machine-overview",level:2},{value:"The purpose of the State Machine",id:"the-purpose-of-the-state-machine",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"smooth-validator-states",children:"Smooth Validator States"})}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.a,{href:"https://smooth.dappnode.io/",children:"Smooth"})," validator can be in multiple states depending on its behavior. In this section we will explain all possible states a validator can have, the consequences of being each state, and how a validator can transition from one state to another."]}),"\n",(0,i.jsx)(t.h2,{id:"state-machine-overview",children:"State Machine Overview"}),"\n",(0,i.jsxs)(t.p,{children:["The oracle employs a ",(0,i.jsx)(t.strong,{children:"state machine"})," to monitor the status of subscribed validators within ",(0,i.jsx)(t.a,{href:"https://smooth.dappnode.io/",children:"Smooth"}),". Various actions trigger state changes, detailed in the following image encompassing all possible transitions. Let's take a look at it:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"statemachine",src:o(2252).A+"",width:"2998",height:"1494"})}),"\n",(0,i.jsx)(t.p,{children:"There are 6 different states a validator can have:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\ud83d\udfe2 ",(0,i.jsx)(t.strong,{children:"Active"}),": The validator is active and subscribed to the pool, earning rewards over time."]}),"\n",(0,i.jsxs)(t.li,{children:["\ud83d\udfe1 ",(0,i.jsx)(t.strong,{children:"YellowCard"}),": The validator missed its last block proposal but not two in a row. This validator earns rewards as if it was active."]}),"\n",(0,i.jsxs)(t.li,{children:["\ud83d\udd34 ",(0,i.jsx)(t.strong,{children:"RedCard"}),": The validator missed its latest two block proposals in a row. As a penalty, the validator does not earn rewards until its next block is successfully proposed to the pool. In other words, this validator is not receiving ",(0,i.jsx)(t.code,{children:"Pending Rewards"})," when somebody else contributes to the pool."]}),"\n",(0,i.jsxs)(t.li,{children:["\u26aa ",(0,i.jsx)(t.strong,{children:"NotSubscribed"}),": The validator is no longer subscribed to the pool, but still tracked by the validator. For example, a validator that unsubscribed. Note that this is still tracked because a validator can unsubscribe but it may still have pending balance to claim. In this state, the validator does not earn rewards."]}),"\n",(0,i.jsxs)(t.li,{children:["\u2620\ufe0f ",(0,i.jsx)(t.strong,{children:"Banned"}),": The validator is banned forever from the pool. A validator is banned when it is subscribed to the pool but proposes a block with the wrong fee recipient."]}),"\n",(0,i.jsxs)(t.li,{children:["\u2753",(0,i.jsx)(t.strong,{children:"Untracked"}),": The validator is not tracked by the pool. It has never subscribed to the pool."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"And 6 different actions can trigger a state transition:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ProposalOk"}),": The validator proposed a valid block with its rewards correctly sent to the smoothing pool address."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ProposalMissed"}),": The validator should have proposed a block but missed its proposal."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ProposalWrongFee"}),": The validator proposes a block but with a wrong fee recipient."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ManualSubscription"}),": The validator manually subscribes to the pool, depositing collateral for its validator index by calling the smart contract function (see event)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"AutoSubscription"}),": The validator is automatically subscribed to the pool, by setting as fee recipient the smoothing pool address."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"Unsubscribe"}),": The validator manually unsubscribes to the pool, calling the unsubscribe function from the smart contract (see event)."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"the-purpose-of-the-state-machine",children:"The purpose of the State Machine"}),"\n",(0,i.jsx)(t.p,{children:"Beyond tracking validator statuses, the state machine ensures fair reward distribution and encourages correct behavior among validators."}),"\n",(0,i.jsx)(t.p,{children:"Validators consistently proposing blocks receive greater rewards compared to those frequently missing proposals, promoting active participation and contribution to the pool."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2252:(e,t,o)=>{o.d(t,{A:()=>s});const s=o.p+"assets/images/smooth_states-1ba74d83a78fa2e0b740effe50c30ee8.png"},8453:(e,t,o)=>{o.d(t,{R:()=>n,x:()=>r});var s=o(6540);const i={},a=s.createContext(i);function n(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);