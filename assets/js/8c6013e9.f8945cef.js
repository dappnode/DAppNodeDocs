"use strict";(self.webpackChunkd_app_node_docs=self.webpackChunkd_app_node_docs||[]).push([[6128],{27646:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"dev/github-actions","title":"GitHub Actions for Dappnode Packages","description":"GitHub Actions help automate workflows around your projects on GitHub. For Dappnode packages, we utilize specific GitHub Actions to manage updates and releases.","source":"@site/docs/dev/github-actions.md","sourceDirName":"dev","slug":"/dev/github-actions","permalink":"/docs/dev/github-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/dappnode/DappnodeDocs/edit/master/docs/dev/github-actions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"devSidebar","previous":{"title":"Package DNS","permalink":"/docs/dev/dns"}}');var a=s(74848),r=s(28453);const o={},i="GitHub Actions for Dappnode Packages",d={},c=[{value:"1. Auto Check for Upstream Updates (<code>auto_check.yml</code>)",id:"1-auto-check-for-upstream-updates-auto_checkyml",level:2},{value:"Workflow File:",id:"workflow-file",level:3},{value:"2. Main Build and Pre-release (<code>main.yml</code>)",id:"2-main-build-and-pre-release-mainyml",level:2},{value:"Workflow File:",id:"workflow-file-1",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"github-actions-for-dappnode-packages",children:"GitHub Actions for Dappnode Packages"})}),"\n",(0,a.jsx)(n.p,{children:"GitHub Actions help automate workflows around your projects on GitHub. For Dappnode packages, we utilize specific GitHub Actions to manage updates and releases."}),"\n",(0,a.jsxs)(n.h2,{id:"1-auto-check-for-upstream-updates-auto_checkyml",children:["1. Auto Check for Upstream Updates (",(0,a.jsx)(n.code,{children:"auto_check.yml"}),")"]}),"\n",(0,a.jsx)(n.p,{children:"This action checks if there's an available update from the upstream repository. If an update is found, it creates a Pull Request with the new version."}),"\n",(0,a.jsx)(n.h3,{id:"workflow-file",children:"Workflow File:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Filename:"})," ",(0,a.jsx)(n.code,{children:"auto_check.yml"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'name: Bump upstream version\n\non:\n  schedule:\n    - cron: "00 */4 * * *"\n  push:\n    branches:\n      - "master"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx @dappnode/dappnodesdk github-action bump-upstream\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PINATA_API_KEY: ${{ secrets.PINATA_API_KEY }}\n          PINATA_SECRET_API_KEY: ${{ secrets.PINATA_SECRET_API_KEY }}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Features:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Scheduled Runs"}),": The action runs every 4 hours (as per the cron setting)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Environment Variables"}),": Uses ",(0,a.jsx)(n.code,{children:"GITHUB_TOKEN"})," for authentication, and ",(0,a.jsx)(n.code,{children:"PINATA_API_KEY"})," and ",(0,a.jsx)(n.code,{children:"PINATA_SECRET_API_KEY"})," for interfacing with the IPFS pinning service Pinata."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"2-main-build-and-pre-release-mainyml",children:["2. Main Build and Pre-release (",(0,a.jsx)(n.code,{children:"main.yml"}),")"]}),"\n",(0,a.jsx)(n.p,{children:"This action builds the Dappnode package and creates a pre-release that's ready to be published."}),"\n",(0,a.jsx)(n.h3,{id:"workflow-file-1",children:"Workflow File:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Filename:"})," ",(0,a.jsx)(n.code,{children:"main.yml"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'name: "Main"\non:\n  pull_request:\n  push:\n    branches:\n      - "main"\n      - "master"\n      - "v[0-9]+.[0-9]+.[0-9]+"\n    paths-ignore:\n      - "README.md"\n\njobs:\n  build-test:\n    runs-on: ubuntu-latest\n    name: Build test\n    if: github.event_name != \'push\'\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx @dappnode/dappnodesdk build --skip_save\n\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.event_name == \'push\'\n    steps:\n      - uses: actions/checkout@v3\n      - name: Publish\n        run: npx @dappnode/dappnodesdk publish patch --dappnode_team_preset\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DEVELOPER_ADDRESS: "0xf35960302a07022aba880dffaec2fdd64d5bf1c1"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Features:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Branch Filters"}),": The action only triggers on the ",(0,a.jsx)(n.code,{children:"main"}),", ",(0,a.jsx)(n.code,{children:"master"}),", and version tags (e.g., ",(0,a.jsx)(n.code,{children:"v1.0.0"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Paths Ignore"}),": Ignores changes solely related to ",(0,a.jsx)(n.code,{children:"README.md"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Conditional Runs"}),": Different steps are executed based on the event that triggered the workflow (e.g., push event or pull request)."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);