"use strict";(self.webpackChunkd_app_node_docs=self.webpackChunkd_app_node_docs||[]).push([[2836],{7759:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"dev/references/notifications","title":"Notifications File Reference (Comming soon)","description":"This document serves as a reference for the Notifications configuration file in DAppNode. It defines the structure, fields, and expected values based on the JSON Schema.","source":"@site/docs/dev/references/notifications.md","sourceDirName":"dev/references","slug":"/dev/references/notifications","permalink":"/docs/dev/references/notifications","draft":false,"unlisted":false,"editUrl":"https://github.com/dappnode/DappnodeDocs/edit/master/docs/dev/references/notifications.md","tags":[],"version":"current","frontMatter":{},"sidebar":"devSidebar","previous":{"title":"Setup Wizard","permalink":"/docs/dev/references/setup-wizard"},"next":{"title":"Overview","permalink":"/docs/dev/package-development/overview"}}');var t=i(4848),o=i(8453);const r={},d="Notifications File Reference (Comming soon)",c={},l=[{value:"Root Object",id:"root-object",level:2},{value:"(Gatus) <code>endpoints</code> (optional)",id:"gatus-endpoints-optional",level:3},{value:"Example (gatus) <code>endpoints</code>",id:"example-gatus-endpoints",level:4},{value:"<code>customEndpoints</code> (optional)",id:"customendpoints-optional",level:3},{value:"Example <code>customEndpoints</code>",id:"example-customendpoints",level:4},{value:"Updating the Notifications File",id:"updating-the-notifications-file",level:2},{value:"Notes",id:"notes",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"notifications-file-reference-comming-soon",children:"Notifications File Reference (Comming soon)"})}),"\n",(0,t.jsxs)(n.p,{children:["This document serves as a reference for the Notifications configuration file in DAppNode. It defines the structure, fields, and expected values based on the ",(0,t.jsx)(n.a,{href:"https://github.com/dappnode/DAppNode/raw/schema/notifications.schema.json",children:"JSON Schema"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"root-object",children:"Root Object"}),"\n",(0,t.jsx)(n.p,{children:"The root object defines the top-level structure and contains the following properties:"}),"\n",(0,t.jsxs)(n.h3,{id:"gatus-endpoints-optional",children:["(Gatus) ",(0,t.jsx)(n.code,{children:"endpoints"})," (optional)"]}),"\n",(0,t.jsxs)(n.p,{children:["The most common and easiest way to configure notifications in DAppNode is by using the ",(0,t.jsx)(n.a,{href:"https://github.com/TwiN/gatus",children:"Gatus"})," standard. To configure notifications using Gatus, you need to create a ",(0,t.jsx)(n.code,{children:"*notifications.yaml"})," file. This file must follow the standard defined in the ",(0,t.jsx)(n.a,{href:"https://docs.dappnode.io/docs/dev/references/notifications",children:"Gatus - notifications file reference"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Gatus monitors the endpoints you define and automatically triggers alerts with the desired notification payload. Additionally, you can benefit from Gatus features."}),"\n",(0,t.jsxs)(n.h4,{id:"example-gatus-endpoints",children:["Example (gatus) ",(0,t.jsx)(n.code,{children:"endpoints"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'endpoints:\n  - name: "Mainnet ETH Node Syncing Check" # Notification title\n    enabled: true\n    group: "ethereum"\n    url: "http://geth.dappnode:8545"\n    method: "POST"\n    body: |\n      {"jsonrpc": "2.0", "id": 1, "method": "eth_syncing", "params": []}\n    headers:\n      Content-Type: "application/json"\n    interval: "30s"\n    conditions:\n      - "[BODY].result == false"\n    definition:\n      title: "Mainnet ETH Node Synced Check" # Notifications - settings: title of the notification to be configured\n      description: "Check if the Mainnet ETH Node is synced. You will receive a notification if the node is syncing and another one when it is synced." # Notifications - settings: description of the notification to be configured\n    correlationId: "geth-eth-syncing" # Unique identifier for each notification endpoint\n    isBanner: false  \n    priority: "medium"\n    alerts:\n      - type: custom\n        enabled: true\n        description: "Geth Ethereum Node syncing" # Notification description\n        failure-threshold: 2\n        success-threshold: 1\n        send-on-resolved: true\n'})}),"\n",(0,t.jsx)(n.p,{children:"An array of configured notification endpoints. Each endpoint object includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"name"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Unique name for the endpoint."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"enabled"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Whether this endpoint is active."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"url"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): URL to send notifications to. Must match the pattern ",(0,t.jsx)(n.code,{children:"^(https?|ftp)://[^s/$.?#].[^s]*$"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"method"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): HTTP method to use. One of: ",(0,t.jsx)(n.code,{children:"GET"}),", ",(0,t.jsx)(n.code,{children:"POST"}),", ",(0,t.jsx)(n.code,{children:"PUT"}),", ",(0,t.jsx)(n.code,{children:"DELETE"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"conditions"})})," (",(0,t.jsx)(n.code,{children:"string[]"}),", required): Array of string expressions representing the conditions that trigger the alert."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"interval"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Time between checks. Must match the pattern ",(0,t.jsx)(n.code,{children:"^[0-9]+[smhd]$"})," (e.g., ",(0,t.jsx)(n.code,{children:"10s"}),", ",(0,t.jsx)(n.code,{children:"5m"}),", ",(0,t.jsx)(n.code,{children:"1h"}),", ",(0,t.jsx)(n.code,{children:"1d"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"group"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Group to which the endpoint belongs."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"correlationId"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): It is the unique identifier that links triggered and resolved notifications based on their endpoint."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"isBanner"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Boolean that controls whether a banner displaying the notification appears at the top of the DAppManager UI. Should be set to ",(0,t.jsx)(n.code,{children:"true"})," only for relevant notifications."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"priority"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Priority that will be displayed on the notification. One of: ",(0,t.jsx)(n.code,{children:"low"}),", ",(0,t.jsx)(n.code,{children:"medium"}),", ",(0,t.jsx)(n.code,{children:"high"}),", ",(0,t.jsx)(n.code,{children:"critical"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"alerts"})})," (",(0,t.jsx)(n.code,{children:"array"}),", required): List of alert configurations for this endpoint."]}),"\n",(0,t.jsx)(n.p,{children:"Each alert object includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"type"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Alert type identifier."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"failure-threshold"})})," (",(0,t.jsx)(n.code,{children:"integer"}),", required): Number of consecutive failures before alert triggers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"success-threshold"})})," (",(0,t.jsx)(n.code,{children:"integer"}),", required): Number of successful checks to mark alert as resolved."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"send-on-resolved"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Whether to send a notification when the alert is resolved."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"description"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Description of the alert."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"enabled"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Whether this alert is enabled."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"definition"})})," (",(0,t.jsx)(n.code,{children:"object"}),", required): Defines the endpoint's purpose."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"title"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Human-readable name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"description"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Detailed explanation."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"metric"})})," (",(0,t.jsx)(n.code,{children:"object"}),", optional): Optional metadata about the metric."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"min"})})," (",(0,t.jsx)(n.code,{children:"number"}),", optional): Minimum acceptable value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"max"})})," (",(0,t.jsx)(n.code,{children:"number"}),", optional): Maximum acceptable value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"unit"})})," (",(0,t.jsx)(n.code,{children:"string"}),", optional): Measurement unit (e.g., ",(0,t.jsx)(n.code,{children:"%"}),", ",(0,t.jsx)(n.code,{children:"ms"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"customendpoints-optional",children:[(0,t.jsx)(n.code,{children:"customEndpoints"})," (optional)"]}),"\n",(0,t.jsx)(n.p,{children:"Defines custom metrics that are not covered by built-in endpoints. In cases where Gatus has limitations, you can create custom endpoints. These endpoints are responsible for sending notifications when required to the notifications package."}),"\n",(0,t.jsx)(n.p,{children:"To use custom endpoints, you should retrieve the user settings from the DAppManager API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -X GET \\\n  http://dappmanager.dappnode/package-manifest/dms.dnp.dappnode.eth \\\n  -H 'Content-Type: application/json'\n"})}),"\n",(0,t.jsx)(n.p,{children:"The response will include the manifest with user settings for custom endpoints:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "notifications": {\n    "customEndpoints": [\n      {\n        "name": "string", // e.g., "Package updates notifications"\n        "description": "string", // e.g., "Receive package updates notifications when a new version is available."\n        "enabled": true // e.g., true\n      }\n    ]\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h4,{id:"example-customendpoints",children:["Example ",(0,t.jsx)(n.code,{children:"customEndpoints"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'customEndpoints:\n  - name: "Package updates notifications"\n    isBanner: false\n    correlationId: "dappmanager-update-pkg"\n    description: "Receive package updates notifications when a new version is available."\n    enabled: true\n'})}),"\n",(0,t.jsx)(n.p,{children:"Each object includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"enabled"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Whether the custom endpoint is active."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"name"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Unique name for the custom metric."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"description"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): Explanation of the custom metric."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"correlationId"})})," (",(0,t.jsx)(n.code,{children:"string"}),", required): It is the unique identifier that links triggered and resolved notifications based on their endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"isBanner"})})," (",(0,t.jsx)(n.code,{children:"boolean"}),", required): Boolean that controls whether a banner displaying the notification appears at the top of the DAppManager UI. Should be set to ",(0,t.jsx)(n.code,{children:"true"})," only for relevant notifications."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"metric"})})," (",(0,t.jsx)(n.code,{children:"object"}),", optional): Metric boundaries and unit.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"treshold"})})," (",(0,t.jsx)(n.code,{children:"number"}),", optional): Threshold value to trigger alert (note: possibly a typo, intended to be ",(0,t.jsx)(n.code,{children:"threshold"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"min"})})," (",(0,t.jsx)(n.code,{children:"number"}),", optional): Minimum acceptable value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"max"})})," (",(0,t.jsx)(n.code,{children:"number"}),", optional): Maximum acceptable value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"unit"})})," (",(0,t.jsx)(n.code,{children:"string"}),", optional): Measurement unit."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"updating-the-notifications-file",children:"Updating the Notifications File"}),"\n",(0,t.jsxs)(n.p,{children:["If the package is already published and you want to change the notifications, you need to update the ",(0,t.jsx)(n.code,{children:"*notifications.yaml"})," file in the package repository. After making changes, you must publish a new version of the package for the updates to take effect."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Changing the endpoint name will create a new notification and the old one will be removed. This is because the notification is identified by its name, and changing it will create a new entry in the notifications system."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Schema draft version: ",(0,t.jsx)(n.a,{href:"http://json-schema.org/draft-07/schema#",children:"JSON Schema Draft-07"})]}),"\n",(0,t.jsxs)(n.li,{children:["Schema ID: ",(0,t.jsx)(n.code,{children:"https://github.com/dappnode/DAppNode/raw/schema/notifications.schema.json"})]}),"\n",(0,t.jsx)(n.li,{children:"Fields not marked as required are considered optional."}),"\n",(0,t.jsx)(n.li,{children:"This schema is extensible to allow future fields and integrations."}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"*notifications.yaml"})," file will injected in the manifest (",(0,t.jsx)(n.code,{children:"dappnode_package.json"}),") for convenience. You can see the manifest inside the dappmanager container in the path ",(0,t.jsx)(n.code,{children:"/usr/src/app/dnp_repo/<packageName>/dappnode_package.json"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["For examples or more usage details, visit the ",(0,t.jsx)(n.a,{href:"https://docs.dappnode.io",children:"DAppNode developer documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);